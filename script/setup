#!/bin/sh

# script/setup: Set up application for the first time after cloning, or set it
#               back to the initial first unused state.

set -e

cd "$(dirname "$0")/.."

script/bootstrap

if [ -f "config/database.yml" ] ; then
    true
else
    echo "==> Generating config/database.yml"
    cp config/database-template.yml config/database.yml
fi

if [ -f "config/application.yml" ] ; then
    true
else
    echo "==> Generating config/application.yml"
    cp config/application.template.yml config/application.yml
fi

if [ -z "${CI+x}" ]; then
    # Do nothing, not on CI
    true
else
    # We're on CI
    if ! command -v chromedriver &> /dev/null; then
        echo "Chromedriver was already found"
        which chromedriver
        chromedriver --version
        whoami
    else
        cat <<STR
No chromedriver for you! But let's try to call it anyway:

        /usr/bin/chromedriver --version
        -> $(/usr/bin/chromedriver --version)

        chromedriver --version
        -> $(chromedriver --version)

        path
        -> ${PATH}

        Me
        -> $(whoami)

STR

        if [ -f "/usr/local/bin/chromedriver" ]; then
            echo "==> Using cached chromedriver"
            sudo chmod +x /usr/local/share/chromedriver
            sudo ln -s /usr/local/share/chromedriver /usr/local/bin/chromedriver
        else
            echo "==> Fetching chromedriver"
            version=$(curl -s https://chromedriver.storage.googleapis.com/LATEST_RELEASE)
            wget -N https://chromedriver.storage.googleapis.com/$version/chromedriver_linux64.zip -P ~/
            unzip ~/chromedriver_linux64.zip -d ~/
            rm ~/chromedriver_linux64.zip
            sudo mv -f ~/chromedriver /usr/local/share/
            sudo chmod +x /usr/local/share/chromedriver
            sudo ln -s /usr/local/share/chromedriver /usr/local/bin/chromedriver
        fi
    fi
    export RAILS_ENV="test"
    export RACK_ENV="test"
    export CI="CIJOE"
fi

echo "==> Setting up DB…"
# reset database to a fresh state.
bin/rake db:reset db:create

if [ -z "$RAILS_ENV" ] && [ -z "$RACK_ENV" ]; then
    # Only things for a development environment will run inside here
    # Do things that need to be done to the application to set up for the first
    # time. Or things needed to be run to to reset the application back to first
    # use experience. These things are scoped to the application's domain.
    echo "==> Seeding some default data…"
    bin/rake db:seed
fi

echo "==> App is now ready to go!"
